// automatically generated by the FlatBuffers compiler, do not modify

package protocol_v1

import (
	flatbuffers "github.com/google/flatbuffers/go"
)

type Envelope struct {
	_tab flatprotocol.Table
}

func GetRootAsEnvelope(buf []byte, offset flatprotocol.UOffsetT) *Envelope {
	n := flatprotocol.GetUOffsetT(buf[offset:])
	x := &Envelope{}
	x.Init(buf, n+offset)
	return x
}

func (rcv *Envelope) Init(buf []byte, i flatprotocol.UOffsetT) {
	rcv._tab.Bytes = buf
	rcv._tab.Pos = i
}

func (rcv *Envelope) Table() flatprotocol.Table {
	return rcv._tab
}

func (rcv *Envelope) Type() byte {
	o := flatprotocol.UOffsetT(rcv._tab.Offset(4))
	if o != 0 {
		return rcv._tab.GetByte(o + rcv._tab.Pos)
	}
	return 0
}

func (rcv *Envelope) MutateType(n byte) bool {
	return rcv._tab.MutateByteSlot(4, n)
}

func EnvelopeStart(builder *flatprotocol.Builder) {
	builder.StartObject(1)
}
func EnvelopeAddType(builder *flatprotocol.Builder, type byte) {
	builder.PrependByteSlot(0, type, 0)
}
func EnvelopeEnd(builder *flatprotocol.Builder) flatprotocol.UOffsetT {
	return builder.EndObject()
}
